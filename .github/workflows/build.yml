---
name: Build

on:
    push:
        branches: [master]
        paths:
            - jmbde/**
            - jmbdeTests/**
            - jmbdeUITests/**
            - jmbde.xcodeproj/**
            - jmbde.xcworkspace/**
            - Package.swift
            - Podfile
            - .github/workflows/build.yml
        tags:
            - "*"

    pull_request:
        branches: [master]
        types: [opened, reopened]
        paths:
            - jmbde/**
            - jmbdeTests/**
            - jmbdeUITests/**
            - jmbde.xcodeproj/**
            - jmbde.xcworkspace/**
            - Package.swift
            - Podfile
            - .github/workflows/build.yml

    release:
        types: [published]

    workflow_dispatch:

env:
    TARGET_NAME: jmbde
    FRAMEWORK_NAME: jmbde
    SCHEME: jmbde
    CACHE_NAME: SWIFT5
    PROJECT_WORKSPACE: jmbde.xcworkspace
    SDK: macosx10.15
    DESTINATION: "arch=x86_64"
    SWIFT_VERSION: 5.5
    LC_CTYPE: en_US.UTF-8
    LANG: en_US.UTF-8
    UPDATE_DOCS: true
    EXPANDED_CODE_SIGN_IDENTITY: "-"
    EXPANDED_CODE_SIGN_IDENTITY_NAME: "-"
    XCODEGEN_VERSION: 2.5.0

jobs:
    build:
        name: "Build macos for ${{ matrix.destination}}"
        runs-on: macos-latest
        needs: tests

        strategy:
            matrix:
                destination: [
                        # "'platform=macOS,variant=Mac Catalyst'",
                        "'platform=macOS'",
                    ]
            fail-fast: false

        steps:
            - name: "🧰 Checkout Source Code"
              if: github.event_name == 'push'
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: "⚙️ Set XCode Version"
              run: sudo xcode-select -s /Applications/Xcode_13.2.1.app

            - name: "⚙️ Initailize the bundler cache"
              uses: actions/cache@v2
              id: bundler-cache
              with:
                  path: vendor/bundle
                  key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-gems-

            - name: "⚙️ Bundle setup"
              run: bundle config path vendor/bundle

            - name: "⚙️ Bundle install"
              if: steps.bundler-cache.outputs.cache-hit != 'true'
              run: bundle install --jobs 4 --retry 3

            - name: "🚧 Compile and build 📦 application"
              run: |
                  pod install || pod install --repo-update
                  set -o pipefail && xcodebuild \
                    -workspace "jmbde.xcworkspace" \
                    -scheme "jmbde" \
                    -destination ${{ matrix.destination }} \
                    -derivedDataPath build/ \
                    clean build | xcpretty
                  ls -a build
                  ls -a build/Build
                  ls -a build/Products

            - name: Upload Artifact
              uses: actions/upload-artifact@v2.3.1
              with:
                  name: jmbde-macOS
                  path: build/Products

    build_GH_Pages:
        name: Build GH Pages
        runs-on: ubuntu-latest
        needs: tests
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Install sphinx
              run: |
                  pip3 install -r docs/requirements.txt

            - name: Running the Sphinx to gh-pages Action
              run: |
                  sphinx-build docs docs/_build

            - name: Upload documentation
              uses: actions/upload-artifact@v2.3.1
              with:
                  name: docs
                  path: docs/_build

    tests:
        name: "Tests on macos-latest"
        runs-on: macos-latest

        steps:
            - name: "🧰 Checkout Source Code"
              if: github.event_name == 'push'
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: "⚙️ Set XCode Version"
              run: sudo xcode-select -s /Applications/Xcode_13.2.1.app

            - name: "⚙️ Initailize the bundler cache"
              uses: actions/cache@v2
              id: bundler-cache
              with:
                  path: vendor/bundle
                  key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-gems-

            - name: "⚙️ Bundle setup"
              run: bundle config path vendor/bundle

            - name: "⚙️ Bundle install"
              if: steps.bundler-cache.outputs.cache-hit != 'true'
              run: bundle install --jobs 4 --retry 3

            - name: "⚙️ pod install"
              run: |
                  pod install || pod install --repo-update

            - name: "🚧 build and test 📦 application"
              run: |
                  set -o pipefail && xcodebuild  \
                      -workspace "jmbde.xcworkspace" \
                      -scheme "jmbde" \
                      -destination "platform=macOS" \
                      -configuration "Debug" \
                      -enableCodeCoverage YES \
                      -showBuildTimingSummary \
                      -derivedDataPath Build/ \
                      -enableThreadSanitizer YES \
                      clean test | xcpretty

                  ./scripts/xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
                  bash <(curl -s https://codecov.io/bash)

    releaseNotes:
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Build Releasenotes
              id: github_releasenotes
              uses: release-drafter/release-drafter@v5.15.0
              with:
                  publish: "${{ steps.check-version.outputs.tag != '' }}"
                  tag: "${{ steps.check-version.outputs.tag }}"
              env:
                  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    changeLog:
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  fetch-depth: 2

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Build ChangeLog
              id: github_changelog
              uses: mikepenz/release-changelog-builder-action@v2.7.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  body: ${{ steps.check-version.outputs }}
              env:
                  GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

    deployGHPages:
        runs-on: ubuntu-latest
        needs: build_GH_Pages
        steps:
            - name: Download Artifact with Pages
              uses: actions/download-artifact@v2
              with:
                  name: docs
                  path: docs/_build

            - name: Deploy to GitHub Pages
              uses: Cecilapp/GitHub-Pages-deploy@v3
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  email: juergen.muelbert@gmail.com
                  build_dir: docs/_build

    deployPrereleases:
        name: Deploy Pre-Release
        if: github.ref == 'refs/heads/master'
        runs-on: ubuntu-20.04
        environment: PreRelease
        needs:
            - build
            - deployGHPages

        steps:
            - name: Pre-Release
              run: echo "here comes the pre release"

            - name: Download builded app (Artifact)
              uses: actions/download-artifact@v2
              with:
                  name: jmbde-macOS
                  path: build/

    deploy:
        name: deploy the Release
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-20.04
        environment: Release
        needs:
            - build
            - changeLog
            - releaseNotes
            - deployGHPages

        steps:
            - name: Release
              run: |
                  echo "here comes the release."

            - name: Download builded app (Artifact)
              uses: actions/download-artifact@v2
              with:
                  name: jmbde-macOS
                  path: build/
