---
name: Build

on:
    push:
        branches: [master]
        tags-ignore:
            - "*"
        paths:
            - src/**
            - global.json
            - jmbde.sln
            - .github/workflows/build.yml

    pull_request:
        branches: [master]
        paths-ignore:
            - "**/*.md"
            - "**/*.txt"
            - ".editorconfig"
            - "docs/**"

env:
    CACHE_NAME: SWIFT5_1
    PROJECT: jmbde.xcworkspace
    FRAMEWORK_NAME: jmbde
    SCHEME: jmbde
    SDK: macosx10.15
    DESTINATION: "arch=x86_64"
    SWIFT_VERSION: 5.1
    LC_CTYPE: en_US.UTF-8
    LANG: en_US.UTF-8
    UPDATE_DOCS: true
    EXPANDED_CODE_SIGN_IDENTITY: "-"
    EXPANDED_CODE_SIGN_IDENTITY_NAME: "-"
    XCODEGEN_VERSION: 2.5.0

jobs:
    macOS_5_1:
        name: "Build macOS (5.1)"
        runs-on: macos-latest
        needs: tests
        env:
            DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  submodules: recursive
                  fetch-depth: 0

            - uses: actions/cache@v2.1.7
              id: bundler-cache
              with:
                  path: vendor/bundle
                  key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-gems-

            - name: Bundle setup
              run: bundle config path vendor/bundle

            - name: Bundle install
              if: steps.bundler-cache.outputs.cache-hit != 'true'
              run: bundle install --jobs 4 --retry 3

            - name: Brew Upgrade
              run: |
                  brew update-reset
                  brew bundle --no-upgrade

            - name: macOS (5.1)
              run: |
                  pod install || pod install --repo-update
                  set -o pipefail && xcodebuild -workspace "jmbde.xcworkspace" -scheme "jmbde" -destination "platform=macOS" clean build | xcpretty

    macOS_5_2:
        name: "Build macOS (5.2)"
        runs-on: macos-latest
        needs: tests
        env:
            DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  submodules: recursive
                  fetch-depth: 0

            - uses: actions/cache@v2.1.7
              id: bundler-cache
              with:
                  path: vendor/bundle
                  key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-gems-

            - name: Bundle setup
              run: bundle config path vendor/bundle

            - name: Bundle install
              if: steps.bundler-cache.outputs.cache-hit != 'true'
              run: bundle install --jobs 4 --retry 3

            - name: Brew Upgrade
              run: |
                  brew update-reset
                  brew bundle --no-upgrade

            - name: macOS (5.2)
              run: |
                  pod install || pod install --repo-update
                  set -o pipefail && xcodebuild -workspace "jmbde.xcworkspace" -scheme "jmbde" -destination "platform=macOS" clean build | xcpretty

    macOS_5_3:
        name: "Build macOS (5.3)"
        runs-on: macos-latest
        needs: tests
        env:
            DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  submodules: recursive
                  fetch-depth: 0

            - uses: actions/cache@v2.1.7
              id: bundler-cache
              with:
                  path: vendor/bundle
                  key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-gems-

            - name: Bundle setup
              run: bundle config path vendor/bundle

            - name: Bundle install
              if: steps.bundler-cache.outputs.cache-hit != 'true'
              run: bundle install --jobs 4 --retry 3

            - name: Brew Upgrade
              run: |
                  brew update-reset
                  brew bundle --no-upgrade

            - name: macOS (5.3)
              run: |
                  pod install || pod install --repo-update
                  set -o pipefail && xcodebuild -workspace "jmbde.xcworkspace" -scheme "jmbde" -destination "platform=macOS" clean build | xcpretty

            - name: Upload Artifact
              uses: actions/upload-artifact@v2.2.4
              with:
                  name: "jmbde-macOS_swift_5_3_${{ matrix.config.os }}-${{ github.sha }}"
                  path: build/bin/${{ matrix.config.binary }}

    build_GH_Pages:
        name: Build GH Pages
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  fetch-depth: 2

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Set up Python
              uses: actions/setup-python@v2.3.0
              with:
                  python-version: "3.10"

            - name: Install sphinx
              run: |
                  pip install -r docs/requirements.txt

            - name: Running the Sphinx to gh-pages Action
              run: |
                  sphinx-build docs docs/_build

            - name: Upload documentation
              uses: actions/upload-artifact@v2.2.4
              with:
                  name: docs
                  path: docs/_build

    tests:
        name: ${{ matrix.session }} ${{ matrix.dotnet-version }} / ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false

            matrix:
                include:
                    - { seift-version: "5.0", os: macos-latest }

        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  fetch-depth: 2

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v0.9.11
              with:
                  versionSpec: "5.x"

            - name: Use GitVersion
              id: gitversion
              uses: gittools/actions/gitversion/execute@v0.9.11

            - name: Display the version
              run: |
                  echo "Version: ${{ steps.gitversion.outputs.semVer }}"

            - name: Unit & integration test
              run: |
                  echo "Put the test here"

    releaseNotes:
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  fetch-depth: 2
            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Build Releasenotes
              id: github_releasenotes
              uses: release-drafter/release-drafter@v5.15.0
              with:
                  publish: "${{ steps.check-version.outputs.tag != '' }}"
                  tag: "${{ steps.check-version.outputs.tag }}"
              env:
                  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    changeLog:
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  fetch-depth: 2
            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Build ChangeLog
              id: github_changelog
              uses: mikepenz/release-changelog-builder-action@v2.7.0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  body: ${{ steps.check-version.outputs }}
              env:
                  GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

    deployGHPages:
        runs-on: ubuntu-latest
        needs: build_GH_Pages
        steps:
            - name: Download Artifact with Pages
              uses: actions/download-artifact@v2.0.10
              with:
                  name: docs
                  path: docs/_build

            - name: Deploy to GitHub Pages
              uses: Cecilapp/GitHub-Pages-deploy@v3
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  email: juergen.muelbert@gmail.com
                  build_dir: docs/_build

    deployPrereleases:
        name: Deploy Pre-Release
        if: github.ref == 'refs/heads/master'
        runs-on: ubuntu-20.04
        environment: PreRelease
        needs:
            - build
            - tests
            - deployGHPages

        steps:
            - name: Pre-Release
              run: echo "here comes the pre release"

    deploy:
        name: deploy the Release
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-20.04
        environment: Release
        needs:
            - build
            - tests
            - changeLog
            - releaseNotes
            - deployGHPages

        steps:
            - name: Release
              run: |
                  echo "here comes the release."
