---
name: Sonar Cloud Analysis
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
  schedule: # This trigger is here only to make sure
    - cron: '17 0 * * SUN' # the example itself doesn't become stale

jobs:
  build:
    name: Sonar Cloud Analysis
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450 # Find the latest version in the "Linux" link on this page:
                                        # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      DISPLAY: ':99'

    strategy:
      matrix:
        qt_target: [desktop]
        os: [ubuntu-latest]
        name: [Ubuntu-20.04 gcc-10]
        qt_version: [6.2.0]
        qt_arch: [gcc_64]
        arch: [amd64]
        artifact: [Ubuntu-gcc]
        cmake_generator: [Ninja]
        build_type: [Release]
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages

        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner

        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

        name: "Tests on macos-latest"
        runs-on: macos-latest

        env:
            swift-version: "5.5"
            DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
        steps:
            - name: "üß∞ Checkout Source Code"
              if: github.event_name == 'push'
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: Fetch all history for all tags and branches
              run: git fetch --prune --unshallow

            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v0.9.11
              with:
                  versionSpec: "5.x"

            - name: Use GitVersion
              id: gitversion
              uses: gittools/actions/gitversion/execute@v0.9.11

            - name: Display the version
              run: |
                  echo "Version: ${{ steps.gitversion.outputs.semVer }}"

            - name: "‚öôÔ∏è Initailize the bundler cache"
              uses: actions/cache@v2
              id: bundler-cache
              with:
                  path: vendor/bundle
                  key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-gems-

            - name: "‚öôÔ∏è Bundle setup"
              run: bundle config path vendor/bundle

            - name: "‚öôÔ∏è Bundle install"
              if: steps.bundler-cache.outputs.cache-hit != 'true'
              run: bundle install --jobs 4 --retry 3

            - name: "‚öôÔ∏è pod install"
              run: |
                  pod install || pod install --repo-update

            - name: "üöß Compile and build üì¶ application"
              run: |
                  set -o pipefail && xcodebuild clean test \
                    -workspace "jmbde.xcworkspace" \
                    -scheme "jmbde" \
                    -destination "platform=macOS" \
                    -configuration "Debug" \
                    -showBuildTimingSummary \
                     -enableThreadSanitizer YES | xcpretty

      - name: Run build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release

      - name: Test
        working-directory: build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV -C ${{ matrix.build_type}}

      - name: Generate coverage reports
        working-directory: build
        run: |
          sudo apt-get install -y lcov gcovr
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/usr/include/*' --output-file coverage.info
          lcov --list coverage.info
          gcovr -j $(nproc) --root ../ --keep --delete --sonarqube coverage.xml

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          files: coverage.info

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

