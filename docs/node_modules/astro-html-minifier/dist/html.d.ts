export interface HTMLOptions {
    /** Do not minify DOCTYPEs. Minified DOCTYPEs may not be spec compliant. */
    doNotMinifyDoctype?: boolean;
    /** Ensure all unquoted attribute values in the output do not contain any characters prohibited by the WHATWG specification. */
    ensureSpecCompliantUnquotedAttributeValues?: boolean;
    /** Do not omit closing tags when possible. */
    keepClosingTags?: boolean;
    /** Do not omit `<html>` and `<head>` opening tags when they don't have attributes. */
    keepHtmlAndHeadOpeningTags?: boolean;
    /** Keep spaces between attributes when possible to conform to HTML standards. */
    keepSpacesBetweenAttributes?: boolean;
    /** Keep all comments. */
    keepComments?: boolean;
    /**
     * If enabled, content in `<script>` tags with a JS or no [MIME type](https://mimesniff.spec.whatwg.org/#javascript-mime-type) will be minified using [minify-js](https://github.com/wilsonzlin/minify-js).
     */
    minifyJs?: boolean;
    /**
     * If enabled, CSS in `<style>` tags and `style` attributes will be minified.
     */
    minifyCss?: boolean;
    /** Remove all bangs. */
    removeBangs?: boolean;
    /** Remove all processing_instructions. */
    removeProcessingInstructions?: boolean;
}
export type RequiredHTMLOptions = Required<HTMLOptions>;
export declare const defaultHTMLOptions: RequiredHTMLOptions;
export declare const convertUserOptions: (options: RequiredHTMLOptions) => Record<string, boolean | undefined>;
export declare const minifyHTML: (dir: string, options: RequiredHTMLOptions) => Promise<void>;
//# sourceMappingURL=html.d.ts.map